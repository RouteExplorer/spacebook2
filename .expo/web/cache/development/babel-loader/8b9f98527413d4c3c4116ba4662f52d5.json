{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"type\", \"pictureSize\", \"poster\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport createElement from 'react-native-web/dist/exports/createElement';\nimport { CameraType } from \"./Camera.types\";\nimport CameraManager from \"./ExponentCameraManager.web\";\nimport { capture } from \"./WebCameraUtils\";\nimport { PictureSizes } from \"./WebConstants\";\nimport { useWebCameraStream } from \"./useWebCameraStream\";\nimport { useWebQRScanner } from \"./useWebQRScanner\";\nvar ExponentCamera = React.forwardRef(function (_ref, ref) {\n  var _props$barCodeScanner3, _props$barCodeScanner4;\n\n  var type = _ref.type,\n      pictureSize = _ref.pictureSize,\n      poster = _ref.poster,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var video = React.useRef(null);\n  var native = useWebCameraStream(video, type, props, {\n    onCameraReady: function onCameraReady() {\n      if (props.onCameraReady) {\n        props.onCameraReady();\n      }\n    },\n    onMountError: props.onMountError\n  });\n  var isQRScannerEnabled = React.useMemo(function () {\n    var _props$barCodeScanner, _props$barCodeScanner2;\n\n    return !!((_props$barCodeScanner = props.barCodeScannerSettings) != null && (_props$barCodeScanner2 = _props$barCodeScanner.barCodeTypes) != null && _props$barCodeScanner2.includes('qr') && !!props.onBarCodeScanned);\n  }, [(_props$barCodeScanner3 = props.barCodeScannerSettings) == null ? void 0 : _props$barCodeScanner3.barCodeTypes, props.onBarCodeScanned]);\n  useWebQRScanner(video, {\n    interval: (_props$barCodeScanner4 = props.barCodeScannerSettings) == null ? void 0 : _props$barCodeScanner4.interval,\n    isEnabled: isQRScannerEnabled,\n    captureOptions: {\n      scale: 1,\n      isImageMirror: native.type === CameraType.front\n    },\n    onScanned: function onScanned(event) {\n      if (props.onBarCodeScanned) {\n        props.onBarCodeScanned(event);\n      }\n    }\n  });\n  React.useImperativeHandle(ref, function () {\n    return {\n      getAvailablePictureSizes: function getAvailablePictureSizes(ratio) {\n        return function _callee() {\n          return _regeneratorRuntime.async(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  return _context.abrupt(\"return\", PictureSizes);\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }();\n      },\n      takePicture: function takePicture(options) {\n        return function _callee2() {\n          var _video$current, _video$current2;\n\n          var settings;\n          return _regeneratorRuntime.async(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!(!video.current || ((_video$current = video.current) == null ? void 0 : _video$current.readyState) !== ((_video$current2 = video.current) == null ? void 0 : _video$current2.HAVE_ENOUGH_DATA))) {\n                    _context2.next = 2;\n                    break;\n                  }\n\n                  throw new CodedError('ERR_CAMERA_NOT_READY', 'HTMLVideoElement does not have enough camera data to construct an image yet.');\n\n                case 2:\n                  settings = native.mediaTrackSettings;\n\n                  if (settings) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  throw new CodedError('ERR_CAMERA_NOT_READY', 'MediaStream is not ready yet.');\n\n                case 5:\n                  return _context2.abrupt(\"return\", capture(video.current, settings, _objectSpread(_objectSpread({}, options), {}, {\n                    onPictureSaved: function onPictureSaved(picture) {\n                      if (options.onPictureSaved) {\n                        options.onPictureSaved(picture);\n                      }\n\n                      if (props.onPictureSaved) {\n                        props.onPictureSaved({\n                          nativeEvent: {\n                            data: picture,\n                            id: -1\n                          }\n                        });\n                      }\n                    }\n                  })));\n\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }();\n      },\n      resumePreview: function resumePreview() {\n        return function _callee3() {\n          return _regeneratorRuntime.async(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (video.current) {\n                    video.current.play();\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }();\n      },\n      pausePreview: function pausePreview() {\n        return function _callee4() {\n          return _regeneratorRuntime.async(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  if (video.current) {\n                    video.current.pause();\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }();\n      }\n    };\n  }, [native.mediaTrackSettings, props.onPictureSaved]);\n  var isMuted = true;\n  var style = React.useMemo(function () {\n    var isFrontFacingCamera = native.type === CameraManager.Type.front;\n    return [StyleSheet.absoluteFill, styles.video, {\n      transform: isFrontFacingCamera ? [{\n        scaleX: -1\n      }] : undefined\n    }];\n  }, [native.type]);\n  return React.createElement(View, {\n    pointerEvents: \"box-none\",\n    style: [styles.videoWrapper, props.style]\n  }, React.createElement(Video, {\n    autoPlay: true,\n    playsInline: true,\n    muted: isMuted,\n    poster: poster,\n    pointerEvents: props.pointerEvents,\n    ref: video,\n    style: style\n  }), props.children);\n});\nexport default ExponentCamera;\nvar Video = React.forwardRef(function (props, ref) {\n  return createElement('video', _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref\n  }));\n});\nvar styles = StyleSheet.create({\n  videoWrapper: {\n    flex: 1,\n    alignItems: 'stretch'\n  },\n  video: {\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover'\n  }\n});","map":{"version":3,"mappings":"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","names":["CodedError","React","createElement","CameraType","CameraManager","capture","PictureSizes","useWebCameraStream","useWebQRScanner","ExponentCamera","forwardRef","ref","type","pictureSize","poster","props","video","useRef","native","onCameraReady","onMountError","isQRScannerEnabled","useMemo","barCodeScannerSettings","barCodeTypes","includes","onBarCodeScanned","interval","isEnabled","captureOptions","scale","isImageMirror","front","onScanned","event","useImperativeHandle","getAvailablePictureSizes","ratio","takePicture","options","current","readyState","HAVE_ENOUGH_DATA","settings","mediaTrackSettings","onPictureSaved","picture","nativeEvent","data","id","resumePreview","play","pausePreview","pause","isMuted","style","isFrontFacingCamera","Type","StyleSheet","absoluteFill","styles","transform","scaleX","undefined","View","pointerEvents","videoWrapper","Video","autoPlay","playsInline","muted","children","create","flex","alignItems","width","height","objectFit"],"sourceRoot":"","sources":["../src/ExponentCamera.web.tsx"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\nimport createElement from 'react-native-web/dist/exports/createElement';\n\nimport {\n  CameraCapturedPicture,\n  CameraNativeProps,\n  CameraPictureOptions,\n  CameraType,\n} from './Camera.types';\nimport CameraManager from './ExponentCameraManager.web';\nimport { capture } from './WebCameraUtils';\nimport { PictureSizes } from './WebConstants';\nimport { useWebCameraStream } from './useWebCameraStream';\nimport { useWebQRScanner } from './useWebQRScanner';\n\nexport interface ExponentCameraRef {\n  getAvailablePictureSizes: (ratio: string) => Promise<string[]>;\n  takePicture: (options: CameraPictureOptions) => Promise<CameraCapturedPicture>;\n  resumePreview: () => Promise<void>;\n  pausePreview: () => Promise<void>;\n}\n\nconst ExponentCamera = React.forwardRef(\n  (\n    { type, pictureSize, poster, ...props }: CameraNativeProps & { children?: React.ReactNode },\n    ref: React.Ref<ExponentCameraRef>\n  ) => {\n    const video = React.useRef<HTMLVideoElement | null>(null);\n\n    const native = useWebCameraStream(video, type as CameraType, props, {\n      onCameraReady() {\n        if (props.onCameraReady) {\n          props.onCameraReady();\n        }\n      },\n      onMountError: props.onMountError,\n    });\n\n    const isQRScannerEnabled = React.useMemo<boolean>(() => {\n      return !!(\n        props.barCodeScannerSettings?.barCodeTypes?.includes('qr') && !!props.onBarCodeScanned\n      );\n    }, [props.barCodeScannerSettings?.barCodeTypes, props.onBarCodeScanned]);\n\n    useWebQRScanner(video, {\n      interval: props.barCodeScannerSettings?.interval,\n      isEnabled: isQRScannerEnabled,\n      captureOptions: { scale: 1, isImageMirror: native.type === CameraType.front },\n      onScanned(event) {\n        if (props.onBarCodeScanned) {\n          props.onBarCodeScanned(event);\n        }\n      },\n      // onError: props.onMountError,\n    });\n\n    // const [pause, setPaused]\n\n    React.useImperativeHandle(\n      ref,\n      () => ({\n        async getAvailablePictureSizes(ratio: string): Promise<string[]> {\n          return PictureSizes;\n        },\n        async takePicture(options: CameraPictureOptions): Promise<CameraCapturedPicture> {\n          if (!video.current || video.current?.readyState !== video.current?.HAVE_ENOUGH_DATA) {\n            throw new CodedError(\n              'ERR_CAMERA_NOT_READY',\n              'HTMLVideoElement does not have enough camera data to construct an image yet.'\n            );\n          }\n          const settings = native.mediaTrackSettings;\n          if (!settings) {\n            throw new CodedError('ERR_CAMERA_NOT_READY', 'MediaStream is not ready yet.');\n          }\n\n          return capture(video.current, settings, {\n            ...options,\n            // This will always be defined, the option gets added to a queue in the upper-level. We should replace the original so it isn't called twice.\n            onPictureSaved(picture) {\n              if (options.onPictureSaved) {\n                options.onPictureSaved(picture);\n              }\n              if (props.onPictureSaved) {\n                props.onPictureSaved({ nativeEvent: { data: picture, id: -1 } });\n              }\n            },\n          });\n        },\n        async resumePreview(): Promise<void> {\n          if (video.current) {\n            video.current.play();\n          }\n        },\n        async pausePreview(): Promise<void> {\n          if (video.current) {\n            video.current.pause();\n          }\n        },\n      }),\n      [native.mediaTrackSettings, props.onPictureSaved]\n    );\n\n    // TODO(Bacon): Create a universal prop, on native the microphone is only used when recording videos.\n    // Because we don't support recording video in the browser we don't need the user to give microphone permissions.\n    const isMuted = true;\n\n    const style = React.useMemo<StyleProp<ViewStyle>>(() => {\n      const isFrontFacingCamera = native.type === CameraManager.Type.front;\n      return [\n        StyleSheet.absoluteFill,\n        styles.video,\n        {\n          // Flip the camera\n          transform: isFrontFacingCamera ? [{ scaleX: -1 }] : undefined,\n        },\n      ];\n    }, [native.type]);\n\n    return (\n      <View pointerEvents=\"box-none\" style={[styles.videoWrapper, props.style]}>\n        <Video\n          autoPlay\n          playsInline\n          muted={isMuted}\n          poster={poster}\n          // webkitPlaysinline\n          pointerEvents={props.pointerEvents}\n          ref={video}\n          style={style}\n        />\n        {props.children}\n      </View>\n    );\n  }\n);\n\nexport default ExponentCamera;\n\nconst Video = React.forwardRef(\n  (\n    props: React.ComponentProps<typeof View> & {\n      autoPlay?: boolean;\n      playsInline?: boolean;\n      muted?: boolean;\n      poster?: string;\n    },\n    ref: React.Ref<HTMLVideoElement>\n  ) => createElement('video', { ...props, ref })\n);\n\nconst styles = StyleSheet.create({\n  videoWrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n  },\n  video: {\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}