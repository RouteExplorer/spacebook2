{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nvar UploadDraft = function () {\n  function UploadDraft() {\n    _classCallCheck(this, UploadDraft);\n  }\n\n  _createClass(UploadDraft, [{\n    key: \"dateCheck\",\n    value: function dateCheck() {\n      var get, parsed, today, _loop, i, _ret;\n\n      return _regeneratorRuntime.async(function dateCheck$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log('UPLOAD CHECKER WORKING!!!!!!');\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('draftStore'));\n\n            case 3:\n              get = _context2.sent;\n              parsed = JSON.parse(get);\n              today = new Date();\n\n              if (!(parsed != null)) {\n                _context2.next = 18;\n                break;\n              }\n\n              _loop = function _loop(i) {\n                var token, id;\n                return _regeneratorRuntime.async(function _loop$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!(parsed[i].date != null && new Date(parsed[i].date) <= today)) {\n                          _context.next = 6;\n                          break;\n                        }\n\n                        _context.next = 3;\n                        return _regeneratorRuntime.awrap(AsyncStorage.getItem('@session_token'));\n\n                      case 3:\n                        token = _context.sent;\n                        id = parsed[i].id;\n                        return _context.abrupt(\"return\", {\n                          v: fetch('http://localhost:3333/api/1.0.0/user/' + id + '/post', {\n                            method: 'POST',\n                            headers: {\n                              'Content-Type': 'application/json',\n                              'X-Authorization': token\n                            },\n                            body: JSON.stringify({\n                              text: parsed[i].text\n                            })\n                          }).then(function (response) {\n                            if (response.status === 200) {\n                              return response.json();\n                            } else if (response.status === 401) {\n                              return response.json();\n                            } else if (response.status === 201) {\n                              parsed.splice(i, 1);\n                              AsyncStorage.setItem('draftStore', JSON.stringify(parsed));\n                            } else {\n                              throw 'Something went wrong';\n                            }\n                          }).catch(function (error) {\n                            console.log(error);\n                          })\n                        });\n\n                      case 6:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              };\n\n              i = 0;\n\n            case 9:\n              if (!(i < parsed.length)) {\n                _context2.next = 18;\n                break;\n              }\n\n              _context2.next = 12;\n              return _regeneratorRuntime.awrap(_loop(i));\n\n            case 12:\n              _ret = _context2.sent;\n\n              if (!(typeof _ret === \"object\")) {\n                _context2.next = 15;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", _ret.v);\n\n            case 15:\n              i++;\n              _context2.next = 9;\n              break;\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return UploadDraft;\n}();\n\nvar UploadDrafts = new UploadDraft();\nexport default UploadDrafts;","map":{"version":3,"sources":["C:/Users/Ruman/Documents/GitHub/spacebook2/components/UploadDraft.js"],"names":["React","Component","AsyncStorage","UploadDraft","console","log","getItem","get","parsed","JSON","parse","today","Date","i","date","token","id","fetch","method","headers","body","stringify","text","then","response","status","json","splice","setItem","catch","error","length","UploadDrafts"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,2CAAzB;;IAEMC,W;;;;;;;WACJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEC,cAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AADF;AAAA,+CAGoBH,YAAY,CAACI,OAAb,CAAqB,YAArB,CAHpB;;AAAA;AAGQC,cAAAA,GAHR;AAIQC,cAAAA,MAJR,GAIiBC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAJjB;AAMQI,cAAAA,KANR,GAMgB,IAAIC,IAAJ,EANhB;;AAAA,oBAOKJ,MAAM,IAAI,IAPf;AAAA;AAAA;AAAA;;AAAA,qCAQWK,CARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BASQL,MAAM,CAACK,CAAD,CAAN,CAAUC,IAAV,IAAkB,IAAlB,IAA0B,IAAIF,IAAJ,CAASJ,MAAM,CAACK,CAAD,CAAN,CAAUC,IAAnB,KAA4BH,KAT9D;AAAA;AAAA;AAAA;;AAAA;AAAA,yDAU0BT,YAAY,CAACI,OAAb,CAAqB,gBAArB,CAV1B;;AAAA;AAUYS,wBAAAA,KAVZ;AAWYC,wBAAAA,EAXZ,GAWiBR,MAAM,CAACK,CAAD,CAAN,CAAUG,EAX3B;AAAA;AAAA,6BAaaC,KAAK,CAAC,0CAA0CD,EAA1C,GAA+C,OAAhD,EAAyD;AACnEE,4BAAAA,MAAM,EAAE,MAD2D;AAEnEC,4BAAAA,OAAO,EAAE;AACP,8CAAgB,kBADT;AAEP,iDAAmBJ;AAFZ,6BAF0D;AAMnEK,4BAAAA,IAAI,EAAEX,IAAI,CAACY,SAAL,CAAe;AACnBC,8BAAAA,IAAI,EAAEd,MAAM,CAACK,CAAD,CAAN,CAAUS;AADG,6BAAf;AAN6D,2BAAzD,CAAL,CAUJC,IAVI,CAUC,UAACC,QAAD,EAAc;AAClB,gCAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,qCAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,6BAFD,MAEO,IAAIF,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAClC,qCAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,6BAFM,MAEA,IAAIF,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAElCjB,8BAAAA,MAAM,CAACmB,MAAP,CAAcd,CAAd,EAAiB,CAAjB;AACAX,8BAAAA,YAAY,CAAC0B,OAAb,CAAqB,YAArB,EAAmCnB,IAAI,CAACY,SAAL,CAAeb,MAAf,CAAnC;AACD,6BAJM,MAIA;AACL,oCAAM,sBAAN;AACD;AACF,2BAtBI,EAwBJqB,KAxBI,CAwBE,UAACC,KAAD,EAAW;AAChB1B,4BAAAA,OAAO,CAACC,GAAR,CAAYyB,KAAZ;AACD,2BA1BI;AAbb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQWjB,cAAAA,CARX,GAQe,CARf;;AAAA;AAAA,oBAQkBA,CAAC,GAAGL,MAAM,CAACuB,MAR7B;AAAA;AAAA;AAAA;;AAAA;AAAA,qDAQWlB,CARX;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAQqCA,cAAAA,CAAC,EARtC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AA8CF,IAAMmB,YAAY,GAAG,IAAI7B,WAAJ,EAArB;AAEA,eAAe6B,YAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\n\r\nclass UploadDraft {\r\n  async dateCheck () {\r\n    console.log('UPLOAD CHECKER WORKING!!!!!!')\r\n\r\n    const get = await AsyncStorage.getItem('draftStore')\r\n    const parsed = JSON.parse(get)\r\n\r\n    const today = new Date()\r\n    if(parsed != null){\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      if (parsed[i].date != null && new Date(parsed[i].date) <= today) {\r\n        const token = await AsyncStorage.getItem('@session_token')\r\n        const id = parsed[i].id\r\n\r\n        return fetch('http://localhost:3333/api/1.0.0/user/' + id + '/post', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'X-Authorization': token\r\n          },\r\n          body: JSON.stringify({\r\n            text: parsed[i].text\r\n          })\r\n        })\r\n          .then((response) => {\r\n            if (response.status === 200) {\r\n              return response.json()\r\n            } else if (response.status === 401) {\r\n              return response.json()\r\n            } else if (response.status === 201) {\r\n              // Remove from item from full list then re-add into the storage\r\n              parsed.splice(i, 1)\r\n              AsyncStorage.setItem('draftStore', JSON.stringify(parsed))\r\n            } else {\r\n              throw 'Something went wrong'\r\n            }\r\n          })\r\n\r\n          .catch((error) => {\r\n            console.log(error)\r\n          })\r\n      }\r\n    }\r\n  }\r\n  }\r\n}\r\n\r\nconst UploadDrafts = new UploadDraft()\r\n\r\nexport default UploadDrafts\r\n"]},"metadata":{},"sourceType":"module"}